(window.webpackJsonp=window.webpackJsonp||[]).push([[18],{405:function(t,a,e){"use strict";e.r(a);var s=e(8),n=Object(s.a)({},(function(){var t=this,a=t.$createElement,e=t._self._c||a;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("p",[t._v("If you are like me, you would be fascinated by the beautiful interactive maps (choropleths) on New York Times (see "),e("a",{attrs:{href:"https://www.nytimes.com/interactive/2020/07/17/upshot/coronavirus-face-mask-map.html?action=click&module=Top%20Stories&pgtype=Homepage",target:"_blank",rel:"noopener noreferrer"}},[t._v("this"),e("OutboundLink")],1),t._v(", for example). They are not only informative but also quite eye catching. You can create a map like this in d3.js fairly easily, but it takes time. Plus you would probably need to wrangle some data first in Python first. Is there a way to create interactive maps like this quickly without leaving Python? This article is for you. I will cover the basics in creating interactive choropleths with the "),e("code",[t._v("altair")]),t._v(" package any state or region that you have a "),e("code",[t._v("geojson")]),t._v(" or "),e("code",[t._v("topojson")]),t._v(" for.")]),t._v(" "),e("h2",{attrs:{id:"what-is-altair"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#what-is-altair"}},[t._v("#")]),t._v(" What is "),e("code",[t._v("altair")]),t._v("?")]),t._v(" "),e("p",[e("code",[t._v("altair")]),t._v(" is a relatively new data visualization package for Python that creates "),e("code",[t._v("vega")]),t._v(" and "),e("code",[t._v("vega-lite")]),t._v(" bindings. "),e("code",[t._v("vega")]),t._v(" and "),e("code",[t._v("vega-lite")]),t._v(' are "a '),e("em",[t._v("visualization grammar")]),t._v(', a declarative language for creating, saving, and sharing interactive visualization designs. With Vega, you can describe the visual appearance and interactive behavior of a visualization in a JSON format, and generate web-based views using Canvas or SVG." '),e("code",[t._v("altair")]),t._v(" is a package that creates such JSON files which then can be parsed with "),e("code",[t._v("vega")]),t._v(" and "),e("code",[t._v("vega-lite")]),t._v(" engines that uses d3 under-the-hood to create common types of statistical charts. I have written "),e("RouterLink",{attrs:{to:"/_posts/forget-about-matplotlib.you-should-be-using-altair.html"}},[t._v("a high-level overview")]),t._v(" of "),e("code",[t._v("altair")]),t._v(" that explains why you should be using "),e("code",[t._v("altair")]),t._v(" instead of, say, "),e("code",[t._v("matplotlib")]),t._v(", "),e("code",[t._v("seaborn")]),t._v(", "),e("code",[t._v("bokeh")]),t._v(", or "),e("code",[t._v("plotly")]),t._v(".")],1),t._v(" "),e("h2",{attrs:{id:"get-started-plotting"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#get-started-plotting"}},[t._v("#")]),t._v(" Get Started Plotting!")]),t._v(" "),e("p",[t._v("The easiest way to get started with "),e("code",[t._v("altair")]),t._v(" is in a "),e("code",[t._v("jupyter notebook")]),t._v(" environment. You can start a notebook in "),e("a",{attrs:{href:"https://colab.research.google.com/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Google Colab"),e("OutboundLink")],1),t._v(" and follow along. I have created "),e("a",{attrs:{href:"https://colab.research.google.com/drive/1YopGikLVbD766fPS_tuWlj2bzpSMB2c0?usp=sharing",target:"_blank",rel:"noopener noreferrer"}},[t._v("this Colab notebook"),e("OutboundLink")],1),t._v(" with all the code that you are going to see. If you want to code locally, I recommend "),e("code",[t._v("jupyter lab")]),t._v(" simply because "),e("code",[t._v("altair")]),t._v(" works in Jupyter Lab by default. Follow these commands to set up a virtual environment and start Jupyter Lab. If you prefer other IDEs, please refer to "),e("a",{attrs:{href:"https://altair-viz.github.io/user_guide/display_frontends.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("this article"),e("OutboundLink")],1),t._v(" from the "),e("code",[t._v("altair")]),t._v(" documentation.")]),t._v(" "),e("h3",{attrs:{id:"step-1-plot-a-base-map"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#step-1-plot-a-base-map"}},[t._v("#")]),t._v(" Step 1. Plot a base map")]),t._v(" "),e("p",[t._v("As a warm up activity, we will be plotting a map of Rhode Island with only outlines and all default settings just to get used to "),e("code",[t._v("altair")]),t._v(". You can start with any "),e("code",[t._v("geojson")]),t._v(" or "),e("code",[t._v("topojson")]),t._v(" file that you want. We are going to be using "),e("a",{attrs:{href:"https://thepolicylab.github.io/UW-211/ri.topo.json",target:"_blank",rel:"noopener noreferrer"}},[t._v("this topojson file of Rhode Island municipalities"),e("OutboundLink")],1),t._v(". It is also the same file that I used to create the map in "),e("a",{attrs:{href:"https://thepolicylab.github.io/UW-211/",target:"_blank",rel:"noopener noreferrer"}},[t._v("this dashboard"),e("OutboundLink")],1),t._v(" to visualize 211 calls received by United Way of Rhode Island.")]),t._v(" "),e("p",[e("code",[t._v("altair")]),t._v(" supports reading data files through http directly. You don't even need to load the json file:")]),t._v(" "),e("div",{staticClass:"language-python extra-class"},[e("pre",{pre:!0,attrs:{class:"language-python"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" altair "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("as")]),t._v(" alt\n\nri_topo_url "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'https://thepolicylab.github.io/UW-211/ri.topo.json'")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# A convenience function that converts topojson features to geojson features")]),t._v("\nri_municipalities "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" alt"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("topo_feature"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("ri_topo_url"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'ri'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\nalt"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Chart"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("ri_municipalities"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("mark_geoshape"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),e("p",[e("img",{attrs:{src:"/datascience-blog/assets/img/visualization-4.png",alt:""}})]),t._v(" "),e("p",[t._v("Voila! A map of Rhode Island should show up. It is that easy! Of course, we are not mapping any data to it, but we will get to that soon.")]),t._v(" "),e("p",[t._v("Let's unpack a little bit about what's going on here:")]),t._v(" "),e("ol",[e("li",[e("code",[t._v("altair")]),t._v(" works with both "),e("code",[t._v("geojson")]),t._v(" and "),e("code",[t._v("topojson")]),t._v(" formats, but "),e("code",[t._v("topojson")]),t._v(" needs to be converted to "),e("code",[t._v("geojson")]),t._v(" format before it can be rendered. That's why we use the convenient function "),e("code",[t._v("alt.topo_feature()")]),t._v(" to extract the features from "),e("code",[t._v("topojson")]),t._v(".")]),t._v(" "),e("li",[t._v("The second argument to "),e("code",[t._v("alt.topo_feature()")]),t._v(" is a string that specifies the name of the object in the "),e("code",[t._v("topojson")]),t._v(" that holds the "),e("code",[t._v("geometryCollection")]),t._v(" in topojson. You can typically find it within the "),e("code",[t._v("objects")]),t._v(" object in the "),e("code",[t._v("topojson")]),t._v(" file. In this case, the name of that object is "),e("code",[t._v("ri")]),t._v(". You can click on "),e("a",{attrs:{href:"https://thepolicylab.github.io/UW-211/ri.topo.json",target:"_blank",rel:"noopener noreferrer"}},[t._v("this link to the json file to see its content"),e("OutboundLink")],1)]),t._v(" "),e("li",[t._v("The "),e("code",[t._v("Chart")]),t._v(" object is the top-level object in "),e("code",[t._v("altair")]),t._v(" that provides an entry into the plot. It accepts a data source as its argument. "),e("code",[t._v("altair")]),t._v(" supports many data source types. In this case, it is a geospatial data source. It also accepts pandas DataFrames, geoPandas geoDataFrames, plain jsons, and many others ("),e("a",{attrs:{href:"https://altair-viz.github.io/user_guide/data.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("full documentation here"),e("OutboundLink")],1),t._v("). Notably, it supports urls to "),e("code",[t._v("csv")]),t._v(" and "),e("code",[t._v("json")]),t._v(" formats, so you don't have to download them first.")]),t._v(" "),e("li",[t._v("Because we used "),e("code",[t._v("alt.topo_feature")]),t._v(", "),e("code",[t._v("altair")]),t._v(" knows there is geospatial information in the plot, so it created the plot by default.")]),t._v(" "),e("li",[t._v("We specified that we are creating "),e("code",[t._v("geoshapes")]),t._v(" as marks. We can specify how these shapes should look. These are basically CSS propeties of SVG shapes. If you have experience working with SVGs with CSS, you should be very familiar with the arguments here:")])]),t._v(" "),e("div",{staticClass:"language-python extra-class"},[e("pre",{pre:!0,attrs:{class:"language-python"}},[e("code",[t._v("alt"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Chart"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("ri_municipalities"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("mark_geoshape"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n    fill"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'teal'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    stroke"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'#fff'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    strokeWidth"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("properties"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n\twidth"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("600")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    height"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("800")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    title"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Map of Rhode Island Municipalities"')]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),e("p",[e("img",{attrs:{src:"/datascience-blog/assets/img/visualization-5.png",alt:""}})]),t._v(" "),e("p",[t._v("Notice that we can pass these options directly to the "),e("code",[t._v("mark_geoshape()")]),t._v(" method. Here we are "),e("strong",[t._v("specifying")]),t._v(" or "),e("strong",[t._v("assigning")]),t._v(" the properties of the shapes, not "),e("strong",[t._v("mapping")]),t._v(" or "),e("strong",[t._v("encoding")]),t._v(" the properties with data. Next, we are going to encode some data to the map.")]),t._v(" "),e("p",[t._v("We also used the "),e("code",[t._v("properties")]),t._v(" method to specify general properties of the charts, such as height, weight, and title. The "),e("code",[t._v("altair")]),t._v(" API is very well structured and predictable in many ways about how you can use them.")]),t._v(" "),e("h3",{attrs:{id:"step-2-scrape-some-data-for-the-map-to-encode"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#step-2-scrape-some-data-for-the-map-to-encode"}},[t._v("#")]),t._v(" Step 2. Scrape some data for the map to encode")]),t._v(" "),e("p",[t._v("Let's simply scrape the population data for Rhode Island municipalities as an example for this post. We can use "),e("code",[t._v("pandas.read_html()")]),t._v(" for this. It basically reads all tables on an html page and saves them as a list of DataFrames. The data source is "),e("a",{attrs:{href:"https://en.wikipedia.org/wiki/List_of_municipalities_in_Rhode_Island",target:"_blank",rel:"noopener noreferrer"}},[t._v("this wikipedia page"),e("OutboundLink")],1),t._v(".")]),t._v(" "),e("div",{staticClass:"language-python extra-class"},[e("pre",{pre:!0,attrs:{class:"language-python"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" requests\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" pandas "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("as")]),t._v(" pd\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# use requests to obtain the html sourse")]),t._v("\nwiki_page "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" requests"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("get"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'https://en.wikipedia.org/wiki/List_of_municipalities_in_Rhode_Island'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("text\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# use pandas to parse the html file and extact all tables")]),t._v("\nri_table "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" pd"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("read_html"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("wiki_page"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\nri_pops "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" ri_table"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("iloc"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("39")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("7")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# get rid of the last (total) row")]),t._v("\nri_pops"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("columns "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'City'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Population'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\nri_pops"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"City"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" ri_pops"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"City"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("str")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("upper"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\nri_pops"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("head"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[t._v("City\tPopulation\nBARRINGTON\t16819\nBRISTOL\t22469\nBURRILLVILLE\t15796\nCENTRAL FALLS\t18928\nCHARLESTOWN\t7859\n")])])]),e("p",[t._v("With this step, we now have a DataFrame of all municipalities in Rhode Island and their populations. The next step would be to "),e("code",[t._v("map")]),t._v(" or "),e("code",[t._v("encode")]),t._v(" this data to the map.")]),t._v(" "),e("h3",{attrs:{id:"step-3-encode-data-to-the-map"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#step-3-encode-data-to-the-map"}},[t._v("#")]),t._v(" Step 3. Encode data to the map")]),t._v(" "),e("p",[t._v("This step is basically to join the population data with the "),e("code",[t._v("topojson")]),t._v(" file. In the "),e("code",[t._v("topojson")]),t._v(" file, each shape is associated with an "),e("code",[t._v("id")]),t._v(" which is the upper-case name of the municipality it represents. We would be using this "),e("code",[t._v("id")]),t._v(" as the key to look up for the corresponding population in the DataFrame that we just created. Normally a join with pandas would solve the problem. The problem here, though, is that we don't have two DataFrames here. This is where "),e("code",[t._v("altair")]),t._v("'s data transformations come in handy. The data transformation API are bindings to "),e("code",[t._v("vega")]),t._v("'s powerful data transformations on JavaScript datasets. In Python, the data transformation API can operate between data saved in JSON format and DataFrame formats, which is very powerful.")]),t._v(" "),e("p",[t._v("Let's slightly modify the code that we created previously to map the population to the color of each shape:")]),t._v(" "),e("div",{staticClass:"language-python extra-class"},[e("pre",{pre:!0,attrs:{class:"language-python"}},[e("code",[t._v("alt"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Chart"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("ri_municipalities"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("mark_geoshape"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n    stroke"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'#fff'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    strokeWidth"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("encode"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n    color"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Population:Q'")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("transform_lookup"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n    lookup"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'id'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    from_"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("alt"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("LookupData"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("data"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("ri_pops"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" key"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'City'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" fields"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Population'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("properties"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n\twidth"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("600")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    height"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("800")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    title"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Rhode Island City Population"')]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),e("p",[e("img",{attrs:{src:"/datascience-blog/assets/img/visualization-6.png",alt:""}})]),t._v(" "),e("p",[t._v('A few things happened here: first, we performed a "lookup transformation", which basically works like SQL joins. For each '),e("code",[t._v("id")]),t._v(" in the "),e("code",[t._v("topojson")]),t._v(", we lookup the data in the "),e("code",[t._v("ri_pops")]),t._v(" DataFrame, find matching values in the "),e("code",[t._v("City")]),t._v(" ("),e("code",[t._v("key")]),t._v(") column, and bringing the "),e("code",[t._v("Population")]),t._v(" values. Then the "),e("code",[t._v("Population")]),t._v(" values can be considered an added column in the original data.")]),t._v(" "),e("p",[t._v('Next, we "encode" the population values as the color for each shape. The ":Q" shorthand specifies that these are quantitaive (continuous) values, so '),e("code",[t._v("altair")]),t._v(' will use a continuous scale for the colors. We now have a map with colors mapped to each tile! By the way, you can now remove the "fill" argument to the "mark_geoshape()" attribute since we are no longer using that.')]),t._v(" "),e("h3",{attrs:{id:"step-4-customize-color-scales"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#step-4-customize-color-scales"}},[t._v("#")]),t._v(" Step 4. Customize color scales")]),t._v(" "),e("p",[t._v("The results already looks very good but if you don't like the default color scales, you can customize the color scale according to your preferences. This is also very easy to do in "),e("code",[t._v("altair")]),t._v(" but involves diving a bit more into the inner workings of "),e("code",[t._v("altair")]),t._v(".")]),t._v(" "),e("div",{staticClass:"language-python extra-class"},[e("pre",{pre:!0,attrs:{class:"language-python"}},[e("code",[t._v("alt"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Chart"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("ri_municipalities"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("mark_geoshape"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n    stroke"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'#fff'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    strokeWidth"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("encode"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n    color"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("alt"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Color"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Population:Q'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" scale"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("alt"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Scale"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("interpolate"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'rgb'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" scheme"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'blues'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("transform_lookup"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n    lookup"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'id'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    from_"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("alt"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("LookupData"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("data"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("ri_pops"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" key"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'City'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" fields"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Population'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("properties"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n\t  width"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("600")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    height"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("800")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    title"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Rhode Island City Population"')]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),e("p",[e("img",{attrs:{src:"/datascience-blog/assets/img/visualization-7.png",alt:""}})]),t._v(" "),e("p",[t._v("The only thing that changed was what was passed to the "),e("code",[t._v("color")]),t._v(' argument of the encode method. Turns out, you can directly pass a string "shorthand" to this argument, and '),e("code",[t._v("altair")]),t._v(" will generate the rest by default. However, you can also directly specify all the options in the mapping, such as the scale it uses, and how the numerical values are mapped to colors, and which color schemes are used. Here "),e("code",[t._v("alt.Color()")]),t._v(" and "),e("code",[t._v("alt.Scale()")]),t._v(' are wrappers that wrap all of the options and keep these options neatly organized. Here we switched to the "blues" color scheme. You can use any scheme that '),e("code",[t._v("vega")]),t._v(" provides ("),e("a",{attrs:{href:"https://vega.github.io/vega/docs/schemes/",target:"_blank",rel:"noopener noreferrer"}},[t._v("documentation here"),e("OutboundLink")],1),t._v("), which is also what is available in "),e("code",[t._v("d3,js")]),t._v(". You can also specify a scheme yourself by providing a list of two CSS-compatible color values to the "),e("code",[t._v("range")]),t._v(" parameter of "),e("code",[t._v("alt.Scale()")]),t._v(".")]),t._v(" "),e("h3",{attrs:{id:"step-5-add-interactive-tooltips"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#step-5-add-interactive-tooltips"}},[t._v("#")]),t._v(" Step 5. Add interactive tooltips")]),t._v(" "),e("p",[t._v("The last step in this post is to make this map interactive by adding tooltips. This is also very easy:")]),t._v(" "),e("div",{staticClass:"language-python extra-class"},[e("pre",{pre:!0,attrs:{class:"language-python"}},[e("code",[t._v("alt"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Chart"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("ri_municipalities"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("mark_geoshape"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n    stroke"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'#fff'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    strokeWidth"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("encode"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n    color"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("alt"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Color"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Population:Q'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" scale"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("alt"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Scale"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("interpolate"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'rgb'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" scheme"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'blues'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    tooltip"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'id:N'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Population:Q'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("transform_lookup"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n    lookup"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'id'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    from_"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("alt"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("LookupData"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("data"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("ri_pops"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" key"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'City'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" fields"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Population'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("properties"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n\twidth"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("600")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    height"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("800")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    title"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Rhode Island City Population"')]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),e("p",[t._v("That's it! When you hover over each shape a tooltip will show up and display the values of the "),e("code",[t._v("id")]),t._v(" and "),e("code",[t._v("Population")]),t._v(" fields. You can, of course, deeply customize these tooltips. You guessed it. You can use "),e("code",[t._v("alt.Tooltip()")]),t._v(" wrapper to provide more specifications. Here I am changing only the "),e("code",[t._v("id")]),t._v(" field because I want the tooltip to display "),e("code",[t._v("City")]),t._v(" as the title rather than `id':")]),t._v(" "),e("div",{staticClass:"language-python extra-class"},[e("pre",{pre:!0,attrs:{class:"language-python"}},[e("code",[t._v("\ttooltip"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("alt"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Tooltip"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'id:N'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" title"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'City'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Population:Q'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n")])])]),e("h3",{attrs:{id:"step-6-share-your-work"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#step-6-share-your-work"}},[t._v("#")]),t._v(" Step 6: Share your work!")]),t._v(" "),e("p",[t._v("Can you use these beautiful maps anywhere else? For sure! You can click on the three-dot menu on the top right corner of any visualization to save the map in PNG or SVG formats. You can also use "),e("code",[t._v("Chart().save()")]),t._v(" to save the chart to a plain html file with all the interactions included. Of course, because that html file loads the vega engine in JavaScript, you need to be online for the chart to render. You can also save the "),e("code",[t._v("vega")]),t._v(" and "),e("code",[t._v("vega-lite")]),t._v(" JSON schema to a JSON file that can be loaded by other Web apps.")]),t._v(" "),e("h2",{attrs:{id:"summary"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#summary"}},[t._v("#")]),t._v(" Summary:")]),t._v(" "),e("p",[t._v("In this post I covered how to use "),e("code",[t._v("altair")]),t._v(" to make any map with a "),e("code",[t._v("topojson")]),t._v(" or "),e("code",[t._v("geojson")]),t._v(" file. We went over the following steps:")]),t._v(" "),e("ol",[e("li",[t._v("Loading a "),e("code",[t._v("topojson")]),t._v(" from a url and using "),e("code",[t._v("alt.topo_feature")]),t._v(" to extract geospatial information.")]),t._v(" "),e("li",[t._v("Creating a basemap and specifying a value vs. mapping (encoding) a value.")]),t._v(" "),e("li",[t._v('Using "lookup transformation" to link data from another source to the '),e("code",[t._v("topojson")])]),t._v(" "),e("li",[t._v("Using wrappers to provide more customizations beyond the default.")]),t._v(" "),e("li",[t._v("Interactive tooltips.")]),t._v(" "),e("li",[t._v("Sharing your map.")])]),t._v(" "),e("p",[t._v("I have shared the code in this post in this "),e("a",{attrs:{href:"https://colab.research.google.com/drive/1YopGikLVbD766fPS_tuWlj2bzpSMB2c0?usp=sharing",target:"_blank",rel:"noopener noreferrer"}},[t._v("Google Colab notebook"),e("OutboundLink")],1),t._v(". Feel free to create your own copy and change the code to see what is possible with "),e("code",[t._v("altair")]),t._v("!")]),t._v(" "),e("p",[t._v("Now you know all the basics of 'altair' mapping. In the next post, we are going to use "),e("code",[t._v("altair")]),t._v(" for a real-world project - we are going to visualize Boston 311 call data with "),e("code",[t._v("altair")]),t._v("! There will be more advanced topics such as faceting and building simple dashboard with filters! Please stay tuned!")])])}),[],!1,null,null,null);a.default=n.exports}}]);